{"version":3,"file":"counter-element.js","sourceRoot":"","sources":["src/counter-element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D;;;;;;GAMG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAWI,UAAK,GAAG,CAAC,CAAC;IAoBd,CAAC;IAnBY,MAAM;QACX,OAAO,IAAI,CAAA;;sBAEG,IAAI,CAAC,MAAM;sBACX,IAAI,CAAC,MAAM;;MAE3B,CAAC;IACH,CAAC;IACO,MAAM;QACV,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC;IACO,MAAM;QACV,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;IACO,MAAM,CAAC,GAAU;QACrB,IAAI,CAAC,KAAK,IAAI,GAAG,CAAA;QACjB,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5H,CAAC;CAEJ,CAAA;AA9BmB,gBAAM,GAAG,GAAG,CAAA;;;;;;;IAO3B,CAAA;AAGD;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;wCACjB;AAXD,SAAS;IADrB,aAAa,CAAC,iBAAiB,CAAC;GACpB,SAAS,CA+BrB;SA/BY,SAAS","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('counter-element')\nexport class MyElement extends LitElement {\n    static override styles = css`\n     :host {\n       display: block;\n       border: solid 1px gray;\n       padding: 16px;\n       max-width: 800px;\n     }\n   `;\n\n    @property({ type: Number })\n    count = 0;\n    override render() {\n        return html`\n     <div>\n     <button @click=${this._onInc}>+</button>\n     <button @click=${this._onDec}>-</button>\n     </div>\n     `;\n    }\n    private _onInc() {\n        this.common(1);\n    }\n    private _onDec() {\n        this.common(-1);\n    }\n    private common(num:number) {\n        this.count += num\n        this.dispatchEvent(new CustomEvent('counter', { detail: this.count, bubbles: true, composed: true, cancelable: true }));\n    }\n\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'counter-element': MyElement;\n    }\n}"]}