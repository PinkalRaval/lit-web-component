{"version":3,"file":"my-element.js","sourceRoot":"","sources":["src/my-element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAEnE;;;;;;GAMG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAWE,UAAK,GAAG,CAAC,CAAC;IA2BZ,CAAC;IAnBU,MAAM;QACb,OAAO,IAAI,CAAA;;;;uBAIQ,IAAI,CAAC,QAAQ;;;;KAI/B,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,MAAM,IAAI,GAAW,IAAI,CAAC,MAAM,CAAC,KAAe,CAAC;QACjD,MAAM,IAAI,GAAW,IAAI,CAAC,MAAM,CAAC,KAAe,CAAC;QACjD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAE;QAChC,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,KAAK,EAAC,EAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;IACnH,CAAC;CAEF,CAAA;AArCiB,gBAAM,GAAG,GAAG,CAAA;;;;;;;GAO1B,CAAA;AAGF;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;wCACjB;AAEV;IADC,KAAK,CAAC,QAAQ,CAAC;yCAEb;AAEH;IADC,KAAK,CAAC,QAAQ,CAAC;yCAEb;AAjBQ,SAAS;IADrB,aAAa,CAAC,kBAAkB,CAAC;GACrB,SAAS,CAsCrB;SAtCY,SAAS","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport { LitElement, html, css } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('addition-element')\nexport class MyElement extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 800px;\n    }\n  `;\n\n  @property({ type: Number })\n  count = 0;\n  @query('#text1')\n  _text1!: HTMLLIElement\n    ;\n  @query('#text2')\n  _text2!: HTMLLIElement\n    ;\n\n  override render() {\n    return html`\n    <div>\n      <input id=\"text1\" />\n      <input id=\"text2\" />\n      <button @click=${this._onClick} part=\"button\">\n          add\n      </button>\n    </div>\n    `;\n  }\n\n  private _onClick() {\n    const inp1: number = this._text1.value as number;\n    const inp2: number = this._text2.value as number;\n    this.count = +(inp1) + +(inp2) ;\n    this.dispatchEvent(new CustomEvent('add',{detail: this.count, bubbles: true, composed: true, cancelable: true}));\n  }\n\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-element': MyElement;\n  }\n}\n"]}